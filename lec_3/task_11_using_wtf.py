"""Использование форм WTForms в приложении

В предыдущем пункте мы рассмотрели, как создавать формы с помощью WTForms.
Теперь рассмотрим, как использовать эти формы в приложении Flask.


Отображение форм на страницах приложения

Для отображения формы на странице приложения необходимо создать объект
формы в представлении и передать его в шаблон."""


from flask import render_template, request
from forms import LoginForm

@app.route('/login/', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if request.method == 'POST' and form.validate():
        # Обработка данных из формы
        pass
        return render_template('login.html', form=form)


"""В данном примере определен маршрут /login, который обрабатывает GET и POST
запросы. В представлении создается объект LoginForm, который передается в
шаблон login.html с помощью функции render_template. Если метод запроса POST и
данные формы проходят валидацию, то выполняется обработка данных из формы.
Шаблон login.html должен содержать тег form с указанием метода и адреса для
отправки данных формы, а также поля формы с помощью тегов input.


{% extends "base.html" %}
{% block content %}
<h1>Login</h1>
<form method="POST" action="{{ url_for('login') }}">
{{ form.csrf_token }}
<p>
{{ form.username.label }}<br>
{{ form.username(size=32) }}
</p>
<p>
{{ form.password.label }}<br>
{{ form.password(size=32) }}
</p>
<p>
<input type="submit" value="Login">
</p>
</form>
{% endblock %}


Внутри блока content определен тег form с методом POST и адресом /login. Для
каждого поля формы вызывается соответствующий метод объекта формы
(например, form.username для поля username) с указанием размера поля.


Обработка данных из формы

Для обработки данных из формы необходимо получить данные из объекта request и
провести их валидацию с помощью метода validate() объекта формы."""

from flask import render_template, request
from forms import RegistrationForm


@app.route('/register/', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if request.method == 'POST' and form.validate():
        # Обработка данных из формы
        email = form.email.data
        password = form.password.data
        print(email, password)
    ...
    return render_template('register.html', form=form)


"""В данном примере определен маршрут /register, который обрабатывает GET и POST
запросы. В представлении создается объект RegistrationForm, который передается в
шаблон register.html с помощью функции render_template. Если метод запроса POST
и данные формы проходят валидацию, то выполняется обработка данных из формы.
Данные из полей формы можно получить с помощью свойств data объекта формы.


Например, для поля email можно получить значение следующим образом:

form.email.data.

Рассмотрим шаблон register.html

{% extends "base.html" %}
{% block content %}
<h1>Login</h1>
<form method="POST" action="{{ url_for('register') }}">
{{ form.csrf_token }}
{% for field in form if field.name != 'csrf_token' %}
<p>
{{ field.label }}<br>
{{ field }}
{% if field.errors %}
<ul class="alert alert-danger">
{% for error in field.errors %}
<li>{{ error }}</li>
{% endfor %}
</ul>
{% endif %}
</p>
{% endfor %}
20
<p>
<input type="submit" value="Register">
</p>
</form>
{% endblock %}


В отличии от шаблона login.html мы не указываем поля явно. После стандартного
вывода csrf токена создаём цикл для по всем полям формы за исключением токена.

Для каждого поля выводится метка и окно поле ввода. Отдельно проверяем
наличие ошибок ввода и если они есть, в цикле выводим все ошибки для каждого
из полей. Таким образом мы динамически формируем страницу регистрации. А в
случае неверного ввода данных пользователем, сразу сообщаем ему об ошибках.
WTForms позволяет легко создавать и валидировать HTML-формы в приложении
Flask. Для отображения форм на страницах приложения необходимо создать объект
формы в представлении и передать его в шаблон. Для обработки данных из формы
необходимо получить данные через post запрос и провести их валидацию с
помощью метода validate() объекта формы.


Заключение по работе с WTForms

WTForms — это мощный инструмент для создания и валидации HTML-форм в
приложении Flask. Он позволяет легко определять поля формы, устанавливать
правила валидации и обрабатывать данные из формы.

Мы рассмотрели основные возможности WTForms и показали, как его использовать
в приложении Flask. Мы создали простую форму входа и форму регистрации, а
также рассмотрели процесс валидации данных из формы.

WTForms имеет множество дополнительных функций, таких как поддержка
многоязычности, кастомизация полей формы и многое другое. Вы можете
ознакомиться с дополнительными возможностями в официальной документации
WTForms.

Использование WTForms в приложении Flask позволяет значительно упростить
процесс создания и валидации HTML-форм. Это помогает сократить время
разработки и повысить качество кода.
"""